[
  {
    "id": "1",
    "type": "JS",
    "difficulty": "2",
    "title": "В чем разница между let, var, const в JS?",
    "solution": "Переменные, объявленные с помощью ключевого слова «var», являются глобальными. Это означает, что они доступны из любого места в коде.Переменные, объявленные с помощью ключевых слов «let» и «const» имеют блочную область видимости. Это означает, что они доступны только внутри блока ({ }).Разница между «let» и «const» состоит в том, что в первом случае мы может менять значение переменной, а во втором — нет (константа). При этом, мы можем менять значение свойства объекта, объявленного с помощью const, но не само свойство (переменную).",
    "link": "https://learn.javascript.ru/let-const"
  },
  {
    "id": "2",
    "type": "JS",
    "difficulty": "2",
    "title": "В чем разница между null и undefined?",
    "solution": "Это 2 примитивных типов данных. null — это «значение отсутствия значения». null — это значение, которое присваивается переменной явно. undefined («неопределенный») представляет собой значение по умолчанию: переменной, которой не было присвоено значения, т.е. объявленной, но не инициализированной переменной;функции, которая ничего не возвращает явно, например, console.log(1);несуществующего свойства объекта.",
    "link": "https://devacademy.ru/article/ponimanie-null-i-undefined-v-javascript"
  },
  {
    "id": "3",
    "type": "JS",
    "difficulty": "1",
    "title": "Что такое DOM?",
    "solution": "DOM или Document Object Model (объектная модель документа) — это прикладной программный интерфейс (API) для работы с HTML и XML документами. Когда браузер первый раз читает («парсит») HTML документ, он формирует большой объект, действительно большой объект, основанный на документе — DOM. DOM представляет собой древовидную структуру (дерево документа). DOM используется для взаимодействия и изменения самой структуры DOM или его отдельных элементов и узлов.",
    "link": "https://developer.mozilla.org/ru/docs/Web/API/Document_Object_Model/Introduction"
  },
  {
    "id": "4",
    "type": "JS",
    "difficulty": "4",
    "title": "Рассажите все что вы знаете о событиях и взаимодействиях с ними в JS",
    "solution": "",
    "link": "['https://developer.mozilla.org/ru/docs/Web/API/Event#introduction', 'https://learn.javascript.ru/bubbling-and-capturing']"
  },
  {
    "id": "5",
    "type": "JS",
    "difficulty": "1",
    "title": "Что такое область видимости (Scope)?",
    "solution": "Область видимости — это место, где (или откуда) мы имеем доступ к переменным или функциям. JS имеем три типа областей видимости: глобальная, функциональная и блочная (ES6). Область видимости — это также набор правил, по которым осуществляется поиск переменной. Если переменной не существует в текущей области видимости, ее поиск производится выше, во внешней по отношению к текущей области видимости. Если и во внешней области видимости переменная отсутствует, ее поиск продолжается вплоть до глобальной области видимости. Если в глобальной области видимости переменная обнаружена, поиск прекращается, если нет — выбрасывается исключение. Поиск осуществляется по ближайшим к текущей областям видимости и останавливается с нахождением переменной. Это называется цепочкой областей видимости (Scope Chain).",
    "link": "https://habr.com/ru/post/517338/"
  },
  {
    "id": "6",
    "type": "JS",
    "difficulty": "1",
    "title": "Для чего используется оператор '!!'?",
    "solution": "Оператор '!!' (двойное отрицание) приводит значение справа от него к логическому значению.",
    "link": ""
  },
  {
    "id": "7",
    "type": "JS",
    "difficulty": "5",
    "title": "Что такое замыкание (Closures)?",
    "solution": "По сути, замыкание — это способность функции во время создания запоминать ссылки на переменные и параметры, находящиеся в текущей области видимости, в области видимости родительской функции, в области видимости родителя родительской функции и так до глобальной области видимости с помощью цепочки областей видимости. Обычно область видимости определяется при создании функции.",
    "link": "['https://learn.javascript.ru/closure', 'https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures', 'https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898', 'https://htmlacademy.ru/blog/boost/frontend/lets-learn-javascript-closures']"
  },
  {
    "id": "8",
    "type": "JS",
    "difficulty": "3",
    "title": "Для чего используется директива «use strict»?",
    "solution": "«use strict» — это директива ES5, которая заставляет весь наш код или код отдельной функции выполняться в строгом режиме. Строгий режим вводит некоторые ограничения по написанию кода, тем самым позволяя избегать ошибок на ранних этапах. Вот какие ограничения накладывает строгий режим. Нельзя присваивать значения или обращаться к необъявленным переменным; Запрещено присваивать значения глобальный переменным, доступным только для чтения или записи; Нельзя удалить «неудаляемое» свойство объекта; Запрещено дублирование передаваемых параметров; Значением «this» по умолчанию является undefined; и т.д.",
    "link": "['https://learn.javascript.ru/strict-mode', 'https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Strict_mode']"
  },
  {
    "id": "9",
    "type": "JS",
    "difficulty": "3",
    "title": "Что такое прототип объекта?",
    "solution": "В двух словах, прототип — это план (схема или проект) объекта. Он используется как запасной вариант для свойств и методов, существующих в данном объекте. Это также один из способов обмена свойствами и функциональностью между объектами. Это основная концепция прототипного наследования в JS. Если определенного свойства нет в объекте, его поиск осуществляется сначала в прототипе объекта, затем в прототипе прототипа объекта и так до тех пор, пока свойство не будет найдено. Это называется цепочкой прототипов. На вершине цепочки прототипов находится Object.prototype.",
    "link": "['https://learn.javascript.ru/prototype-inheritance', 'https://developer.mozilla.org/ru/docs/Web/JavaScript/Inheritance_and_the_prototype_chain']"
  },
  {
    "id": "10",
    "type": "JS",
    "difficulty": "2",
    "title": "Что такое IIFE?",
    "solution": "IIFE или Immediately Invoked Function Expression — это функция, которая вызывается или выполняется сразу же после создания или объявления. Для создания IIFE необходимо обернуть функцию в круглые скобки (оператор группировки), превратив ее в выражение, и затем вызвать ее с помощью еще одних круглых скобок. Это выглядит так: (function(){})().",
    "link": "https://developer.mozilla.org/ru/docs/Glossary/IIFE"
  }
]